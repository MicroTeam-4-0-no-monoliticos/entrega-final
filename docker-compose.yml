version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: aeropartners-postgres
    environment:
      POSTGRES_DB: aeropartners
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Pulsar
  pulsar:
    image: apachepulsar/pulsar:3.1.0
    container_name: aeropartners-pulsar
    command: >
      bash -c "
        bin/pulsar standalone --no-functions-worker --no-stream-storage
      "
    ports:
      - "6650:6650"  # Pulsar service port
      - "8081:8080"  # Pulsar admin port (cambiado para evitar conflicto con proxy)
    environment:
      PULSAR_MEM: "-Xms512m -Xmx512m -XX:MaxDirectMemorySize=1g"
    volumes:
      - pulsar_data:/pulsar/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/admin/v2/clusters"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Aplicación Aeropartners (Pagos)
  aeropartners:
    build: .
    container_name: aeropartners-app
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aeropartners
      PULSAR_URL: pulsar://pulsar:6650
      PULSAR_ADMIN_URL: http://pulsar:8080
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    command: >
      sh -c "
        echo 'Esperando a que los servicios estén listos...' &&
        sleep 15 &&
        echo 'Iniciando aplicación...' &&
        python -m uvicorn src.aeropartners.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Servicio de Campañas - Primario
  campaigns-svc:
    build: .
    container_name: campaigns-svc
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aeropartners
      PULSAR_URL: pulsar://pulsar:6650
      PULSAR_ADMIN_URL: http://pulsar:8080
      SERVICE_NAME: campaigns-svc
      SUBSCRIPTION_TYPE: failover
      SUBSCRIPTION_NAME: campaigns-failover
      DLQ_TOPIC: campaigns.DLQ
      MAX_REDELIVER_COUNT: 3
      ACK_TIMEOUT_MILLIS: 30000
      NEGATIVE_ACK_REDELIVERY_DELAY_MILLIS: 5000
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    restart: always
    command: >
      sh -c "
        echo 'Esperando a que los servicios estén listos...' &&
        sleep 20 &&
        echo 'Iniciando servicio de campañas primario...' &&
        python -m uvicorn src.aeropartners.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Servicio de Campañas - Réplica
  campaigns-svc-replica:
    build: .
    container_name: campaigns-svc-replica
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aeropartners
      PULSAR_URL: pulsar://pulsar:6650
      PULSAR_ADMIN_URL: http://pulsar:8080
      SERVICE_NAME: campaigns-svc-replica
      SUBSCRIPTION_TYPE: failover
      SUBSCRIPTION_NAME: campaigns-failover
      DLQ_TOPIC: campaigns.DLQ
      MAX_REDELIVER_COUNT: 3
      ACK_TIMEOUT_MILLIS: 30000
      NEGATIVE_ACK_REDELIVERY_DELAY_MILLIS: 5000
    ports:
      - "8002:8000"
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    restart: always
    command: >
      sh -c "
        echo 'Esperando a que los servicios estén listos...' &&
        sleep 25 &&
        echo 'Iniciando servicio de campañas réplica...' &&
        python -m uvicorn src.aeropartners.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Proxy de Campañas con Failover
  campaigns-proxy:
    build:
      context: ./campaigns-proxy
      dockerfile: Dockerfile
    container_name: campaigns-proxy
    environment:
      PRIMARY_SERVICE_URL: http://campaigns-svc:8000
      REPLICA_SERVICE_URL: http://campaigns-svc-replica:8000
      HEALTH_CHECK_INTERVAL: 2
      HEALTH_CHECK_TIMEOUT: 5
      MAX_CONSECUTIVE_FAILURES: 3
      PORT: 8080
    ports:
      - "8080:8080"  # Puerto público del proxy
    depends_on:
      - campaigns-svc
      - campaigns-svc-replica
    restart: always
    command: python main.py

  # Consumer de Campañas - Primario
  campaigns-consumer:
    build: .
    container_name: campaigns-consumer
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aeropartners
      PULSAR_URL: pulsar://pulsar:6650
      PULSAR_ADMIN_URL: http://pulsar:8080
      SERVICE_NAME: campaigns-svc
      SUBSCRIPTION_TYPE: failover
      SUBSCRIPTION_NAME: campaigns-failover
      DLQ_TOPIC: campaigns.DLQ
      MAX_REDELIVER_COUNT: 3
      ACK_TIMEOUT_MILLIS: 30000
      NEGATIVE_ACK_REDELIVERY_DELAY_MILLIS: 5000
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    restart: always
    command: >
      sh -c "
        echo 'Esperando a que Pulsar esté listo...' &&
        sleep 30 &&
        echo 'Iniciando consumer de campañas primario...' &&
        python -c \"from src.aeropartners.modulos.campanas.infraestructura.pulsar_consumer import PulsarCampanasConsumer; consumer = PulsarCampanasConsumer(); consumer.start_consuming()\"
      "

  # Consumer de Campañas - Réplica
  campaigns-consumer-replica:
    build: .
    container_name: campaigns-consumer-replica
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aeropartners
      PULSAR_URL: pulsar://pulsar:6650
      PULSAR_ADMIN_URL: http://pulsar:8080
      SERVICE_NAME: campaigns-svc-replica
      SUBSCRIPTION_TYPE: failover
      SUBSCRIPTION_NAME: campaigns-failover
      DLQ_TOPIC: campaigns.DLQ
      MAX_REDELIVER_COUNT: 3
      ACK_TIMEOUT_MILLIS: 30000
      NEGATIVE_ACK_REDELIVERY_DELAY_MILLIS: 5000
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    restart: always
    command: >
      sh -c "
        echo 'Esperando a que Pulsar esté listo...' &&
        sleep 35 &&
        echo 'Iniciando consumer de campañas réplica...' &&
        python -c \"from src.aeropartners.modulos.campanas.infraestructura.pulsar_consumer import PulsarCampanasConsumer; consumer = PulsarCampanasConsumer(); consumer.start_consuming()\"
      "

  # Procesador de Outbox - Campañas
  campaigns-outbox-processor:
    build: .
    container_name: campaigns-outbox-processor
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aeropartners
      PULSAR_URL: pulsar://pulsar:6650
      PULSAR_ADMIN_URL: http://pulsar:8080
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    restart: always
    command: >
      sh -c "
        echo 'Esperando a que los servicios estén listos...' &&
        sleep 25 &&
        echo 'Iniciando procesador de outbox de campañas...' &&
        python -c \"import time; from src.aeropartners.modulos.campanas.infraestructura.outbox import OutboxCampanasProcessor; processor = OutboxCampanasProcessor(); [print(f'Procesados {processor.procesar_eventos_pendientes()} eventos del outbox de campañas a Pulsar') or time.sleep(30) for _ in iter(int, 1)]\"
      "

  # Procesador de Outbox con Pulsar (Pagos - existente)
  outbox-processor:
    build: .
    container_name: aeropartners-outbox
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aeropartners
      PULSAR_URL: pulsar://pulsar:6650
      PULSAR_ADMIN_URL: http://pulsar:8080
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    restart: always
    command: >
      sh -c "
        echo 'Esperando a que los servicios estén listos...' &&
        sleep 20 &&
        echo 'Iniciando procesador de outbox con Pulsar...' &&
        python -c \"import time; from src.aeropartners.modulos.pagos.infraestructura.outbox import PulsarOutboxProcessor; processor = PulsarOutboxProcessor(); [print(f'Procesados {processor.procesar_eventos_pendientes()} eventos del outbox a Pulsar') or time.sleep(30) for _ in iter(int, 1)]\"
      "

  # Consumidor de eventos de Pulsar (Pagos - existente)
  pulsar-consumer:
    build: .
    container_name: aeropartners-consumer
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/aeropartners
      PULSAR_URL: pulsar://pulsar:6650
      PULSAR_ADMIN_URL: http://pulsar:8080
    depends_on:
      postgres:
        condition: service_healthy
      pulsar:
        condition: service_healthy
    volumes:
      - ./src:/app/src
    restart: always
    command: >
      sh -c "
        echo 'Esperando a que Pulsar esté listo...' &&
        sleep 25 &&
        echo 'Iniciando consumidor de eventos de Pulsar...' &&
        python -c \"from src.aeropartners.modulos.pagos.infraestructura.pulsar_consumer import PulsarEventConsumer; consumer = PulsarEventConsumer(); consumer.start_consuming()\"
      "

  # Servicio de Datos Mock v1
  servicio-datos-v1:
    build:
      context: ./servicios-mock/servicio-datos-v1
      dockerfile: Dockerfile
    container_name: servicio-datos-v1
    environment:
      SERVICE_VERSION: v1
      SERVICE_PORT: 8000
    ports:
      - "9001:8000"
    restart: always

  # Servicio de Datos Mock v2
  servicio-datos-v2:
    build:
      context: ./servicios-mock/servicio-datos-v2
      dockerfile: Dockerfile
    container_name: servicio-datos-v2
    environment:
      SERVICE_VERSION: v2
      SERVICE_PORT: 8000
    ports:
      - "9002:8000"
    restart: always

volumes:
  postgres_data:
  pulsar_data: